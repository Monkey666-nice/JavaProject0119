package demo6;

public class Test1 {
    public static void main(String[] args) {
        /*位运算符  在二进制上运算的符号
        * <<  左移运算符
        * >>  右移运算符
        * >>> 不带号右移运算符
        * &   按位与运算
        * |   按位或运算
        * ^   按位异或运算
        * ~   按位取反运算
        * */

        //1、左移 <<
        int a=-8;    //00000000 00000000 00000000 00001000
        int b=a<<1;//00000000 00000000 00000000 00001000  上面的左移一位，最左边的0被挤出去了，最右边补0
                   // 00000000 00000000 00000000 00010000 变成了这样，转换为十进制：16
        System.out.println(b);

        //2、右移 >>
        int c=a>>1;//8-->00001000 （为了方便，我们就看最后八位）
                   //     00001000（最右边的0被挤出去了，最左边补上符号位0）
                   //    00000100  -->4
        System.out.println(c);
                   //-8-->10000000 00000000 00000000 00001000-->
        //                01111111 11111111 11111111 11110111-->
        //

        //3、不带号右移 >>>
        int d=a>>>1;
        //a=-8 --->10000000 00000000 00000000 00001000 （最高位是符号位，最高位为0的话，表示正数；为1的时候，表示负数）
        //          10000000 00000000 00000000 00001000 （最左边符号位也会移动，最左边补0，最右边的0被挤出去）
        //         01000000 00000000 00000000 00000100  -->
        System.out.println(d);

        //    11111111   11111111   11111111  11111000  (补码)
        //     11111111   11111111   11111111  11111000 (右移一位，最右边溢出一位)
        //    011111111   11111111   11111111  1111100  (无符号移位，高位补0)
        //--> 01111111    11111111    11111111   11111100  (整理之后)
        //--> 01111111    11111111    11111111   11111100  (原码)
        //--> 2,147,483,644 (十进制)

        //4、按位与 &
        //同为1，则为1；一方为0，则为0。
        int e=8;  //   0000 1000
        int f=9; //    0000 1001
        int g=e & f;// 0000 1000  --> 8
        System.out.println(g);

        //5、按位或 |
        //一方为1，则为1；同为0，才为0。
        int e2=8;       //  0000 1000
        int f2=9;       //  0000 1001
        int g2=e2 | f2; //  0000 1001 -->9
        System.out.println(g2);

        //6、按位异或 ^
        //相同即为0，不同即为1
        int e3=8;        //  0000 1000
        int f3=9;        //  0000 1001
        int g3=e3 ^ f3;  //  0000 0001 -->1
        System.out.println(g3);

        //7、按位取反~
        //原来为0，变为1；原来为1，变为0。
        int h= 10;                // 0000 1010
        System.out.println(~h);   // 1111 0101




    }
}
